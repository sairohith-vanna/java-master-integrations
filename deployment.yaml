# Author: Vangala Sai Rohith
# 
# Deployment for JMI Spring Boot application
# 
# Since it's an EKS cluster created by ekctl, it's already authorized by default
# to fetch the image from ECR

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jmi-poc-deployment
  namespace: jmi-poc-ns01
spec:
  replicas: 5
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 50
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: jmi-poc
  template:
    metadata:
      namespace: jmi-poc-ns01
      labels:
        app: jmi-poc
    spec:
      containers:
      - name: jmi-api
        image: 957315603675.dkr.ecr.ap-south-1.amazonaws.com/jmi-sample-app:0.2
        resources:
          limits:
            memory: "256Mi"
            cpu: "500m"
        ports:
        - containerPort: 8080

---

# A simple NodePort service to serve the JMI API
# on the Nodes' public IP. 
# The security group has to be updated to allow
# inbound connections on the port generated by the service

apiVersion: v1
kind: Service
metadata:
  namespace: jmi-poc-ns01
  name: jmi-poc-service
spec:
  type: NodePort
  selector:
    app: jmi-poc
  ports:
  - port: 80
    targetPort: 8080
    nodePort: 30000

---

# Adding a LoadBalancer service to potentially attach
# an Application ELB, in addition to the above 
# NodePort service. You may also want to optionally
# eliminate the above if you're running on a cloud's
# managed cluster & don't need a NodePort service

apiVersion: v1
kind: Service
metadata:
  namespace: jmi-poc-ns01
  name: jmi-poc-service-lb
spec:
  type: LoadBalancer
  selector:
    app: jmi-poc
  ports:
  - port: 80
    targetPort: 8080
